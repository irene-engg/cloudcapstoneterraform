name: "Terraform CI/CD"

on:
  push:
    branches:
      - main  # Runs when pushing to the main branch
  pull_request:
    branches:
      - main  # Runs on pull requests to the main branch

jobs:
  terraform:
    name: "Terraform Deploy"
    runs-on: ubuntu-latest

    steps:
      - name: Debug Directory Structure
        run: ls -R

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6  # Use the latest stable version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Initialize Terraform
        run: terraform init
   
      - name: Terraform Validate
        run: terraform validate
        
      - name: Terraform Plan
        run: terraform plan -var-file="terraform.tfvars" -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'  # Only apply on main branch
        run: terraform apply -auto-approve tfplan
        
  destroy-on-failure:
    name: "Destroy Resources on Failure"
    runs-on: ubuntu-latest
    needs: terraform  # This job depends on the `terraform` job
    if: failure()  # Run only if the `terraform` job fails

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Initialize Terraform
        run: terraform init

      - name: Terraform Apply (Dry Run)
        run: terraform plan -out=tfplan

      - name: Show Terraform State
        run: terraform state list || echo "No state found"

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        
